# Generated by Django 3.0.6 on 2020-08-08 05:35

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='nombre')),
            ],
            options={
                'verbose_name': 'Enfermedad',
                'verbose_name_plural': 'Enfermedades',
            },
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_fat', models.FloatField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='grasa corporal')),
                ('body_muscle', models.FloatField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='músculo corporal')),
                ('waist', models.FloatField(blank=True, null=True, verbose_name='cintura')),
                ('belly', models.FloatField(blank=True, null=True, verbose_name='abdomen')),
                ('hip', models.FloatField(blank=True, null=True, verbose_name='cadera')),
                ('biceps', models.FloatField(blank=True, null=True, verbose_name='biceps')),
                ('another_measures', models.TextField(blank=True, null=True, verbose_name='otras medidas antropométricas')),
                ('reason_objectives', models.TextField(blank=True, null=True, verbose_name='razones y objetivos')),
                ('surgeries', models.TextField(blank=True, null=True, verbose_name='cirugías')),
                ('under_medication', models.BooleanField(default=False, verbose_name='bajo medicamento')),
                ('medicines', models.TextField(blank=True, null=True, verbose_name='medicinas')),
                ('under_supplement', models.BooleanField(default=False, verbose_name='bajo medicamento')),
                ('supplements', models.TextField(blank=True, null=True, verbose_name='suplementos')),
                ('allergic', models.BooleanField(default=False, verbose_name='alergico')),
                ('allergies', models.TextField(blank=True, null=True, verbose_name='alergias')),
                ('food_intolerant', models.BooleanField(default=True, verbose_name='intolerante')),
                ('intolerant_foods', models.TextField(blank=True, null=True, verbose_name='comidas no toleradas')),
                ('smoker', models.BooleanField(default=False, verbose_name='fumador')),
                ('smoke_frequency', models.TextField(blank=True, null=True, verbose_name='frecuencia')),
                ('coffee_drinker', models.BooleanField(default=True, verbose_name='bebedor de café')),
                ('ways_of_coffe_consume', models.TextField(blank=True, null=True, verbose_name='formas de consumo de cafe')),
                ('alcohol_drinker', models.BooleanField(default=True, verbose_name='consumidor de alcohol')),
                ('ways_of_alcohol_consume', models.TextField(blank=True, null=True, verbose_name='formas de consumo de alcohol')),
                ('water_mililiters', models.FloatField(blank=True, null=True, verbose_name='consumo de agua')),
                ('sugar_drinker', models.BooleanField(default=True)),
                ('ways_of_sugar_drinks_consume', models.TextField(blank=True, null=True, verbose_name='formas de consumo de bebidas azucaradas')),
                ('wake_up_time', models.TimeField(blank=True, null=True, verbose_name='hora al despertarse')),
                ('sleep_time', models.TimeField(blank=True, null=True, verbose_name='hora al dormir')),
                ('breakfast_hour', models.TimeField(blank=True, null=True, verbose_name='hora de desayuno')),
                ('breakfast_detail', models.TextField(blank=True, null=True, verbose_name='detalle del desayuno')),
                ('firstbreak_hour', models.TimeField(blank=True, null=True, verbose_name='hora de colación')),
                ('firstbreak_detail', models.TextField(blank=True, null=True, verbose_name='detalle de la colación')),
                ('lunch_hour', models.TimeField(blank=True, null=True, verbose_name='hora de comida')),
                ('lunch_detail', models.TextField(blank=True, null=True, verbose_name='detalle de la comida')),
                ('secondbreak_hour', models.TimeField(blank=True, null=True, verbose_name='hora de merienda')),
                ('secondbreak_detail', models.TextField(blank=True, null=True, verbose_name='detalle del merienda')),
                ('dinner_hour', models.TimeField(blank=True, null=True, verbose_name='hora de cena')),
                ('dinner_detail', models.TextField(blank=True, null=True, verbose_name='detalle de la cena')),
                ('between_meals', models.TextField(blank=True, null=True, verbose_name='entre comidas')),
                ('dislike_foods', models.TextField(blank=True, null=True, verbose_name='comida que no le agrada')),
                ('like_foods', models.TextField(blank=True, null=True, verbose_name='comida que le agrada')),
                ('exercise_details', models.TextField(blank=True, null=True, verbose_name='detalles de ejercicios')),
                ('injuries', models.TextField(blank=True, null=True, verbose_name='lesiones')),
            ],
            options={
                'verbose_name': 'Historia Clínica',
                'verbose_name_plural': 'Historias Clínicas',
            },
        ),
        migrations.CreateModel(
            name='MedicalTracing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meal_times', models.PositiveIntegerField(verbose_name='tiempos de comida')),
                ('schedule', models.TextField(verbose_name='horarios')),
                ('amounts', models.TextField(verbose_name='cantidades')),
                ('water', models.TextField(verbose_name='consumo de agua')),
                ('exercise', models.TextField(verbose_name='ejercicio')),
                ('personal_goals', models.TextField(verbose_name='metas personales')),
                ('weekend_meals', models.TextField(verbose_name='alimentación de fines de semana')),
                ('alcohol', models.TextField(verbose_name='alcohol')),
                ('gastric_symptoms', models.TextField(verbose_name='síntomas gástricos')),
                ('comments', models.TextField(verbose_name='comentarios')),
                ('weight', models.FloatField(validators=[django.core.validators.MaxValueValidator(500), django.core.validators.MinValueValidator(1)], verbose_name='peso')),
                ('body_fat', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='grasa corporal')),
                ('body_muscle', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='músculo corporal')),
                ('kg_muscle', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='kg músculo')),
                ('igv', models.FloatField(verbose_name='igv')),
                ('waist', models.FloatField(verbose_name='cintura')),
                ('belly', models.FloatField(verbose_name='abdomen')),
                ('hip', models.FloatField(verbose_name='cadera')),
                ('biceps', models.FloatField(verbose_name='biceps')),
                ('quadriceps', models.FloatField(verbose_name='cuádriceps')),
            ],
            options={
                'verbose_name': 'Segumiento Médico',
                'verbose_name_plural': 'Segumientos Médicos',
            },
        ),
    ]
